#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 52 66 65 67>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 70 69 38>;
            hold-trigger-on-release;
        };

        hmlshift: hmlshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 52 66 65 67>;
            hold-trigger-on-release;
        };

        hmrshift: hmrshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HMRSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 70 69 38>;
            hold-trigger-on-release;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        Sleep {
            bindings = <&kp LG(LA(C_SLEEP))>;
            key-positions = <0 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 1 ESCAPE        &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &mt LS(NUMBER_4) NUMBER_4  &mt LS(N5) N5                     &mt F11 LEFT_PARENTHESIS                                                                   &mt F12 RIGHT_PARENTHESIS            &mt LS(NUMBER_6) NUMBER_6         &mt LS(NUMBER_7) N7  &mt LS(N8) N8        &mt LS(N9) N9            &mt LS(N0) N0       &caps_word
&kp TAB             &kp Q                      &kp W                      &kp F                      &kp P                      &kp B                             &mt LS(LEFT_BRACKET) LEFT_BRACKET                                                          &mt LS(RIGHT_BRACKET) RIGHT_BRACKET  &kp J                             &kp L                &kp U                &kp Y                    &mt LS(SEMI) SEMI   &mt TILDE GRAVE
&kp DEL             &hml LCTRL A               &hml LEFT_ALT R            &hml LEFT_COMMAND S        &hml LEFT_SHIFT T          &hmlshift LS(LC(LG(LEFT_ALT))) G  &kp MINUS                          &kp LG(C)  &kp LG(V)      &kp LS(LG(C))  &kp RIGHT_ALT  &kp EQUAL                            &hmrshift LS(LC(LG(LEFT_ALT))) M  &hmr RIGHT_SHIFT N   &hmr LEFT_COMMAND E  &hmr LEFT_ALT I          &hmr LCTRL O        &kp BSPC
&mt LEFT_SHIFT SQT  &kp Z                      &kp X                      &kp C                      &kp D                      &kp V                                                                           &kp HOME       &kp END                                                            &kp K                             &kp H                &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &mt QUESTION SLASH  &mt RIGHT_SHIFT DOUBLE_QUOTES
&mo 2               &kp LC(LS(TAB))            &kp PAGE_DOWN              &kp PG_UP                  &kp LC(TAB)                                                  &mo 1                              &kp SPACE  &kp SQT        &kp LS(DQT)    &kp ENTER      &kp LS(LA(LC(LG(ENTER))))                                              &kp LEFT             &kp DOWN             &kp UP                   &kp RIGHT           &mo 2
            >;
        };

        sys {
            bindings = <
&trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5  &trans                                                &trans           &kp F6  &kp F7      &kp F8             &kp F9        &kp F10                      &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans                                                &trans           &trans  &trans      &trans             &trans        &trans                       &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans        &trans      &trans  &trans      &trans           &trans  &trans      &trans             &trans        &trans                       &bt BT_CLR
&trans        &trans        &trans        &trans        &trans        &trans                        &trans      &trans                               &trans  &trans      &trans             &trans        &mt LS(BACKSLASH) BACKSLASH  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &bt BT_SEL 0  &trans      &trans  &bl BL_TOG  &rgb_ug RGB_TOG          &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_NEXT                   &bootloader
            >;
        };

        num {
            bindings = <
&none   &kp LBKT   &kp RBKT                   &kp LS(LPAR)               &kp LS(RPAR)               &kp LS(LBRC)  &kp LS(RBRC)                                    &kp LBKT  &kp RBKT   &kp LS(LPAR)               &kp LS(RPAR)               &kp LS(LBRC)               &kp LS(RBRC)  &none
&none   &kp ASTRK  &mt LS(N7) N7              &mt LS(N8) N8              &mt LS(N9) N9              &none         &none                                           &none     &none      &mt LS(N7) N7              &mt LS(N8) N8              &mt LS(N9) N9              &kp ASTRK     &none
&none   &kp PLUS   &mt LS(NUMBER_4) NUMBER_4  &mt LS(N5) N5              &mt LS(NUMBER_6) NUMBER_6  &kp EQUAL     &none         &none   &none      &none  &none   &none     &kp EQUAL  &mt LS(NUMBER_4) NUMBER_4  &mt LS(N5) N5              &mt LS(NUMBER_6) NUMBER_6  &kp PLUS      &none
&none   &kp MINUS  &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &none                               &none      &none                    &none      &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &kp MINUS     &none
&trans  &none      &none                      &none                      &none                                    &none         &kp N0  &none      &none  &kp N0  &none                &none                      &none                      &none                      &none         &trans
            >;
        };
    };
};
